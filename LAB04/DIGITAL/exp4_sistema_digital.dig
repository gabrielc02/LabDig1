<?xml version="1.0" encoding="utf-8"?>
<circuit>
  <version>2</version>
  <attributes/>
  <visualElements>
    <visualElement>
      <elementName>External</elementName>
      <elementAttributes>
        <entry>
          <string>applicationType</string>
          <appType>IVERILOG</appType>
        </entry>
        <entry>
          <string>Label</string>
          <string>exp4_sistema_digital</string>
        </entry>
        <entry>
          <string>externalInputs</string>
          <string>clock,reset,iniciar,chaves:4</string>
        </entry>
        <entry>
          <string>Width</string>
          <int>12</int>
        </entry>
        <entry>
          <string>Code</string>
          <string>module exp4_sistema_digital (
    input clock, reset, iniciar,
    input [3:0] chaves,
    output pronto, acertou, errou,
    output db_igual, db_tem_jogada, db_clock, db_iniciar,
    output [3:0] leds, 
    output [3:0] db_contagem, db_memoria, db_jogadafeita, db_estado
);

//Sinais Gerais
wire sig_db_tem_jogada;

//Sinais Intermediario Display
wire [3:0] sig_db_contagem;
wire [3:0] sig_db_memoria;
wire [3:0] sig_db_jogada;
wire [3:0] sig_db_estado;

//Sinais Intermediario UC &amp; FD
//UC - FD
wire sig_contaC;
wire sig_zeraR;
wire sig_zeraC;
wire sig_registraR;
//FD - UC
wire sig_jogada;
wire sig_igual;
wire sig_fim;

// Fluxo de Dados
exp4_fluxo_dados FD (
    .chaves             ( chaves ),
    .clock              ( clock ),
    .contaC             ( sig_contaC ),
    .registraR          ( sig_registraR ),
    .zeraC              ( sig_zeraC ),
    .zeraR              ( sig_zeraR ),
    .igual				( db_igual ),
    .fimC               ( sig_fim ),
    .db_jogada          ( sig_db_jogada ),
    .db_tem_jogada      ( sig_db_tem_jogada ),
    .jogada_feita       ( sig_jogada), 
    .db_contagem        ( sig_db_contagem ), 
    .db_memoria         ( sig_db_memoria )
);

assign sig_igual = db_igual;

// Unidade de Controle
exp4_unidade_controle UC (
    .clock      ( clock ),
    .reset      ( reset ),
    .iniciar    ( iniciar ),
    .fim        ( sig_fim ),
    .jogada     ( sig_jogada ),
    .igual      ( sig_igual ),
    .zeraC      ( sig_zeraC ),
    .contaC     ( sig_contaC ),
    .zeraR      ( sig_zeraR ),
    .registraR  ( sig_registraR ),
    .pronto     ( pronto ),
	.acertou    ( acertou ),
	.errou      ( errou ),
    .db_estado  ( sig_db_estado )
);



//Depuracao
assign db_clock =       clock;
assign db_iniciar =     iniciar;
assign db_tem_jogada =  sig_db_tem_jogada;
assign db_jogadafeita = sig_db_jogada;
assign db_contagem =    sig_db_contagem;
assign db_memoria =     sig_db_memoria;
assign db_estado =      sig_db_estado;
assign leds =           chaves;
endmodule
//------------------------------------------------------------------
// Arquivo   : exp4_unidade_controle.v
// Projeto   : Experiencia 4 - Desenvolvimento de Projeto de Circuitos Digitais em FPGA
//------------------------------------------------------------------
// Descricao : Unidade de controle
//
// usar este codigo como template (modelo) para codificar 
// m√°quinas de estado de unidades de controle            
//------------------------------------------------------------------
// Revisoes  :
//     Data        Versao  Autor             Descricao
//     14/01/2024  1.0     Edson Midorikawa  versao inicial
//     25/01/2025  1.2     T1B07             versao atualizada
//------------------------------------------------------------------
//
module exp4_unidade_controle (
    input      clock,
    input      igual,
    input      reset,
    input      iniciar,
    input      jogada,
    input      fim,
    output reg zeraC,
    output reg contaC,
    output reg zeraR,
    output reg registraR,
    output reg pronto,
    output reg acertou, errou,
    output reg [3:0] db_estado
);

    // Define estados
    parameter inicial               = 4&apos;b0000;  // 0
    parameter inicializa_elementos  = 4&apos;b0001;  // 1
    parameter espera_jogada         = 4&apos;b0011;  // 3
    parameter registra_jogada       = 4&apos;b0100;  // 4
    parameter proxima_jogada        = 4&apos;b0101;  // 5
    parameter compara_jogada        = 4&apos;b0110;  // 6
    parameter final_acertou         = 4&apos;b0111;  // 7
    parameter final_errou           = 4&apos;b1000;  // 8

    // Variaveis de estado
    reg [3:0] Eatual, Eprox;

    // Memoria de estado
    always @(posedge clock or posedge reset) begin
        if (reset)
            Eatual &lt;= inicial;
        else
            Eatual &lt;= Eprox;
    end

    // Logica de proximo estado
    always @* begin
        case (Eatual)
            inicial:                Eprox = iniciar ? inicializa_elementos : inicial;
            inicializa_elementos:   Eprox = espera_jogada;
            espera_jogada:          Eprox = jogada ? registra_jogada : espera_jogada;
            registra_jogada:        Eprox = compara_jogada;
            compara_jogada:         Eprox = igual ? (fim ? final_acertou : proxima_jogada) : final_errou;
            proxima_jogada:			Eprox = espera_jogada;
			final_acertou:          Eprox = iniciar ? inicializa_elementos : final_acertou;
            final_errou:            Eprox = iniciar ? inicializa_elementos : final_errou;
            default:                Eprox = inicial;
        endcase
    end

    // Logica de saida (maquina Moore)
    always @* begin
        zeraC     = (Eatual == inicial || Eatual == inicializa_elementos) ? 1&apos;b1 : 1&apos;b0;
        zeraR     = (Eatual == inicial) ? 1&apos;b1 : 1&apos;b0;
        registraR = (Eatual == registra_jogada) ? 1&apos;b1 : 1&apos;b0;
        contaC    = (Eatual == proxima_jogada) ? 1&apos;b1 : 1&apos;b0;
        pronto    = (Eatual == final_acertou || Eatual == final_errou) ? 1&apos;b1: 1&apos;b0;
        acertou   = (Eatual == final_acertou) ? igual : 1&apos;b0;
        errou     = (Eatual == final_errou) ? (~igual) : 1&apos;b0;

        // Saida de depuracao (estado)
        case (Eatual)
            inicial:                db_estado = 4&apos;b0000;  // 0
            inicializa_elementos:   db_estado = 4&apos;b0001;  // 1
            espera_jogada:          db_estado = 4&apos;b0011;  // 3
            registra_jogada:        db_estado = 4&apos;b0100;  // 4
            proxima_jogada:         db_estado = 4&apos;b0101;  // 5
            compara_jogada:         db_estado = 4&apos;b0110;  // 6
            final_acertou:          db_estado = 4&apos;b0111;  // 7
            final_errou:            db_estado = 4&apos;b1000;  // 8
            default:                db_estado = 4&apos;b1110;  // E (erro)
        endcase
    end
	

endmodule
/* --------------------------------------------------------------------
 * Arquivo   : exp4_fluxo_dados.v
 * Projeto   : Experiencia 4 - Desenvolvimento de Projeto de Circuitos Digitais em FPGA
 * --------------------------------------------------------------------
 * Descricao : Fluxo de Dados da Experiencia 4
 * --------------------------------------------------------------------
 * Revisoes  :
 *     Data        Versao  Autor             Descricao
 *     24/01/2025  1.1     Ts1B7  versao inicial
 * --------------------------------------------------------------------
*/

module exp4_fluxo_dados (
    input [3:0] chaves,
    input clock, contaC, registraR, zeraC, zeraR,
    output igual, fimC, jogada_feita, db_tem_jogada,
    output [3:0] db_jogada, db_contagem, db_memoria
);

wire [3:0] sig_mem_address;
wire [3:0] sig_mem_out;
wire [3:0] sig_reg_out;
wire sig_fim;
wire sig_jogada_feita;
wire sig_db_tem_jogada;
assign sig_db_tem_jogada = |chaves; 
wire reset_detector;
assign reset_detector = zeraC;

// contador_163
contador_163 contador (
    .clock  ( clock ),
    .clr    ( ~zeraC ),
    .ld     ( 1&apos;b1 ),
    .ent    ( 1&apos;b1 ),
    .enp    ( contaC ),
    .D      ( 4&apos;b0000 ),
    .Q      ( sig_mem_address ),
    .rco    ( sig_fim )
);

// Registrador 4 Bits
registrador_4 reg4Bits (
    .clock   ( clock ),
    .clear   ( zeraR ),
    .enable  ( registraR ),
    .D       ( chaves ),
    .Q       ( sig_reg_out )
);

//Detector de jogadas
edge_detector detector (
    .clock   ( clock ),
    .reset   ( reset_detector ),
    .sinal   ( sig_db_tem_jogada ),
    .pulso   (  sig_jogada_feita )
);

// sync_rom_16x4
sync_rom_16x4 memoria (
    .clock      ( clock ),
    .address    ( sig_mem_address ),
    .data_out   ( sig_mem_out )
);

// comparador_85
comparador_85 comparador (
    .A      ( sig_mem_out ),
    .B      ( sig_reg_out ),
    .ALBi   ( 1&apos;b0 ),
    .AGBi   ( 1&apos;b0 ),
    .AEBi   ( 1&apos;b1 ),
    .ALBo   (  ),
    .AGBo   (  ),
    .AEBo   ( igual )
);

assign fimC =           sig_fim;
assign db_jogada =      sig_reg_out;
assign db_contagem =    sig_mem_address;
assign db_memoria =     sig_mem_out;
assign db_tem_jogada =  sig_db_tem_jogada;
assign jogada_feita =   sig_jogada_feita;

endmodule

/* ------------------------------------------------------------------------
 *  Arquivo   : edge_detector.v
 *  Projeto   : Experiencia 4 - Desenvolvimento de Projeto de
 *                              Circuitos Digitais com FPGA
 * ------------------------------------------------------------------------
 *  Descricao : detector de borda
 *              gera um pulso na saida de 1 periodo de clock
 *              a partir da detecao da borda de subida sa entrada
 * 
 *              sinal de reset ativo em alto
 * 
 *              &gt; codigo adaptado a partir de codigo VHDL disponivel em
 *                https://surf-vhdl.com/how-to-design-a-good-edge-detector/
 * ------------------------------------------------------------------------
 *  Revisoes  :
 *      Data        Versao  Autor             Descricao
 *      26/01/2024  1.0     Edson Midorikawa  versao inicial
 * ------------------------------------------------------------------------
 */
 
module edge_detector (
    input  clock,
    input  reset,
    input  sinal,
    output pulso
);

    reg reg0;
    reg reg1;

    always @(posedge clock or posedge reset) begin
        if (reset) begin
            reg0 &lt;= 1&apos;b0;
            reg1 &lt;= 1&apos;b0;
        end else if (clock) begin
            reg0 &lt;= sinal;
            reg1 &lt;= reg0;
        end
    end

    assign pulso = ~reg1 &amp; reg0;

endmodule


/* -----------------------------------------------------------------
 *  Arquivo   : comparador_85.v
 *  Projeto   : Experiencia 2 - Um Fluxo de Dados Simples
 * -----------------------------------------------------------------
 * Descricao : comparador de magnitude de 4 bits 
 *             similar ao CI 7485
 *             baseado em descricao comportamental disponivel em	
 * https://web.eecs.umich.edu/~jhayes/iscas.restore/74L85b.v
 * -----------------------------------------------------------------
 * Revisoes  :
 *     Data        Versao  Autor             Descricao
 *     21/12/2023  1.0     Edson Midorikawa  criacao
 * -----------------------------------------------------------------
 */

module comparador_85 (ALBi, AGBi, AEBi, A, B, ALBo, AGBo, AEBo);

    input[3:0] A, B;
    input      ALBi, AGBi, AEBi;
    output     ALBo, AGBo, AEBo;
    wire[4:0]  CSL, CSG;

    assign CSL  = ~A + B + ALBi;
    assign ALBo = ~CSL[4];
    assign CSG  = A + ~B + AGBi;
    assign AGBo = ~CSG[4];
    assign AEBo = ((A == B) &amp;&amp; AEBi);

endmodule /* comparador_85 */

//------------------------------------------------------------------
// Arquivo   : contador_163.v
// Projeto   : Experiencia 3 - Unidade de Controle
//------------------------------------------------------------------
// Descricao : Contador binario de 4 bits, modulo 16
//             similar ao componente 74163
//
// baseado no componente Vrcntr4u.v do livro Digital Design Principles 
// and Practices, Fifth Edition, by John F. Wakerly              
//------------------------------------------------------------------
// Revisoes  :
//     Data        Versao  Autor             Descricao
//     17/01/2025  1.0     Grupo T1B07  versao inicial
//------------------------------------------------------------------
//
module contador_163 ( clock, clr, ld, ent, enp, D, Q, rco );
    input clock, clr, ld, ent, enp;
    input [3:0] D;
    output reg [3:0] Q;
    output reg rco;

    always @ (posedge clock)
        if (~clr)               Q &lt;= 4&apos;d0;
        else if (~ld)           Q &lt;= D;
        else if (ent &amp;&amp; enp)    Q &lt;= Q + 1&apos;b1;
        else                    Q &lt;= Q;
 
    always @ (Q or ent)
        if (ent &amp;&amp; (Q == 4&apos;d15))   rco = 1;
        else                       rco = 0;
endmodule

/* ----------------------------------------------------------------
 * Arquivo   : hexa7seg.v
 * Projeto   : Experiencia 2 - Um Fluxo de Dados Simples
 *--------------------------------------------------------------
 * Descricao : decodificador hexadecimal para 
 *             display de 7 segmentos 
 * 
 * entrada : hexa - codigo binario de 4 bits hexadecimal
 * saida   : sseg - codigo de 7 bits para display de 7 segmentos
 *
 * baseado no componente bcd7seg.v da Intel FPGA
 *--------------------------------------------------------------
 * dica de uso: mapeamento para displays da placa DE0-CV
 *              bit 6 mais significativo √© o bit a esquerda
 *              p.ex. sseg(6) -&gt; HEX0[6] ou HEX06
 *--------------------------------------------------------------
 * Revisoes  :
 *     Data        Versao  Autor             Descricao
 *     24/12/2023  1.0     Edson Midorikawa  criacao
 *--------------------------------------------------------------
 */

module hexa7seg (hexa, display);
    input      [3:0] hexa;
    output reg [6:0] display;

    /*
     *    ---
     *   | 0 |
     * 5 |   | 1
     *   |   |
     *    ---
     *   | 6 |
     * 4 |   | 2
     *   |   |
     *    ---
     *     3
     */
        
    always @(hexa)
    case (hexa)
        4&apos;h0:    display = 7&apos;b1000000;
        4&apos;h1:    display = 7&apos;b1111001;
        4&apos;h2:    display = 7&apos;b0100100;
        4&apos;h3:    display = 7&apos;b0110000;
        4&apos;h4:    display = 7&apos;b0011001;
        4&apos;h5:    display = 7&apos;b0010010;
        4&apos;h6:    display = 7&apos;b0000010;
        4&apos;h7:    display = 7&apos;b1111000;
        4&apos;h8:    display = 7&apos;b0000000;
        4&apos;h9:    display = 7&apos;b0010000;
        4&apos;ha:    display = 7&apos;b0001000;
        4&apos;hb:    display = 7&apos;b0000011;
        4&apos;hc:    display = 7&apos;b1000110;
        4&apos;hd:    display = 7&apos;b0100001;
        4&apos;he:    display = 7&apos;b0000110;
        4&apos;hf:    display = 7&apos;b0001110;
        default: display = 7&apos;b1111111;
    endcase
endmodule

//------------------------------------------------------------------
// Arquivo   : registrador_4.v
// Projeto   : Experiencia 3 - Projeto de uma Unidade de Controle 
//------------------------------------------------------------------
// Descricao : Registrador de 4 bits
//             
//------------------------------------------------------------------
// Revisoes  :
//     Data        Versao  Autor             Descricao
//     14/12/2023  1.0     Edson Midorikawa  versao inicial
//------------------------------------------------------------------
//
module registrador_4 (
    input        clock,
    input        clear,
    input        enable,
    input  [3:0] D,
    output [3:0] Q
);

    reg [3:0] IQ;

    always @(posedge clock or posedge clear) begin
        if (clear)
            IQ &lt;= 0;
        else if (enable)
            IQ &lt;= D;
    end

    assign Q = IQ;

endmodule

//------------------------------------------------------------------
// Arquivo   : sync_rom_16x4.v
// Projeto   : Experiencia 3 - Projeto de uma Unidade de Controle 
//------------------------------------------------------------------
// Descricao : ROM sincrona 16x4 (conte√∫do pre-programado)
//             
//------------------------------------------------------------------
// Revisoes  :
//     Data        Versao  Autor             Descricao
//     14/12/2023  1.0     Edson Midorikawa  versao inicial
//------------------------------------------------------------------
//
module sync_rom_16x4 (clock, address, data_out);
    input            clock;
    input      [3:0] address;
    output reg [3:0] data_out;

    always @ (posedge clock)
    begin
        case (address)
            4&apos;b0000: data_out = 4&apos;b0001;
            4&apos;b0001: data_out = 4&apos;b0010;
            4&apos;b0010: data_out = 4&apos;b0100;
            4&apos;b0011: data_out = 4&apos;b1000;
            4&apos;b0100: data_out = 4&apos;b0100;
            4&apos;b0101: data_out = 4&apos;b0010;
            4&apos;b0110: data_out = 4&apos;b0001;
            4&apos;b0111: data_out = 4&apos;b0001;
            4&apos;b1000: data_out = 4&apos;b0010;
            4&apos;b1001: data_out = 4&apos;b0010;
            4&apos;b1010: data_out = 4&apos;b0100;
            4&apos;b1011: data_out = 4&apos;b0100;
            4&apos;b1100: data_out = 4&apos;b1000;
            4&apos;b1101: data_out = 4&apos;b1000;
            4&apos;b1110: data_out = 4&apos;b0001;
            4&apos;b1111: data_out = 4&apos;b0100;
        endcase
    end
endmodule</string>
        </entry>
        <entry>
          <string>externalOutputs</string>
          <string>pronto,acertou,errou,db_igual,db_tem_jogada,db_clock,db_iniciar,leds:4,db_contagem:4,db_memoria:4,db_jogadafeita:4,db_estado:4</string>
        </entry>
      </elementAttributes>
      <pos x="320" y="180"/>
    </visualElement>
    <visualElement>
      <elementName>Clock</elementName>
      <elementAttributes>
        <entry>
          <string>runRealTime</string>
          <boolean>true</boolean>
        </entry>
      </elementAttributes>
      <pos x="100" y="180"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes/>
      <pos x="680" y="180"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes/>
      <pos x="720" y="200"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes/>
      <pos x="760" y="220"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes/>
      <pos x="680" y="240"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes/>
      <pos x="720" y="260"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes/>
      <pos x="760" y="280"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes/>
      <pos x="680" y="300"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>intFormat</string>
          <intFormat>bin</intFormat>
        </entry>
        <entry>
          <string>addValueToGraph</string>
          <boolean>false</boolean>
        </entry>
        <entry>
          <string>Bits</string>
          <int>4</int>
        </entry>
      </elementAttributes>
      <pos x="820" y="320"/>
    </visualElement>
    <visualElement>
      <elementName>In</elementName>
      <elementAttributes>
        <entry>
          <string>intFormat</string>
          <intFormat>bin</intFormat>
        </entry>
        <entry>
          <string>Bits</string>
          <int>4</int>
        </entry>
      </elementAttributes>
      <pos x="100" y="340"/>
    </visualElement>
    <visualElement>
      <elementName>Seven-Seg-Hex</elementName>
      <elementAttributes/>
      <pos x="900" y="120"/>
    </visualElement>
    <visualElement>
      <elementName>Seven-Seg-Hex</elementName>
      <elementAttributes/>
      <pos x="1020" y="120"/>
    </visualElement>
    <visualElement>
      <elementName>Seven-Seg-Hex</elementName>
      <elementAttributes/>
      <pos x="1100" y="120"/>
    </visualElement>
    <visualElement>
      <elementName>Seven-Seg-Hex</elementName>
      <elementAttributes/>
      <pos x="1240" y="120"/>
    </visualElement>
    <visualElement>
      <elementName>Ground</elementName>
      <elementAttributes/>
      <pos x="1300" y="440"/>
    </visualElement>
    <visualElement>
      <elementName>Button</elementName>
      <elementAttributes/>
      <pos x="100" y="220"/>
    </visualElement>
    <visualElement>
      <elementName>Button</elementName>
      <elementAttributes/>
      <pos x="100" y="260"/>
    </visualElement>
  </visualElements>
  <wires>
    <wire>
      <p1 x="560" y="320"/>
      <p2 x="820" y="320"/>
    </wire>
    <wire>
      <p1 x="560" y="240"/>
      <p2 x="680" y="240"/>
    </wire>
    <wire>
      <p1 x="160" y="240"/>
      <p2 x="320" y="240"/>
    </wire>
    <wire>
      <p1 x="560" y="400"/>
      <p2 x="1280" y="400"/>
    </wire>
    <wire>
      <p1 x="560" y="260"/>
      <p2 x="720" y="260"/>
    </wire>
    <wire>
      <p1 x="100" y="260"/>
      <p2 x="140" y="260"/>
    </wire>
    <wire>
      <p1 x="100" y="180"/>
      <p2 x="320" y="180"/>
    </wire>
    <wire>
      <p1 x="560" y="180"/>
      <p2 x="680" y="180"/>
    </wire>
    <wire>
      <p1 x="100" y="340"/>
      <p2 x="160" y="340"/>
    </wire>
    <wire>
      <p1 x="560" y="340"/>
      <p2 x="940" y="340"/>
    </wire>
    <wire>
      <p1 x="560" y="200"/>
      <p2 x="720" y="200"/>
    </wire>
    <wire>
      <p1 x="120" y="200"/>
      <p2 x="320" y="200"/>
    </wire>
    <wire>
      <p1 x="560" y="280"/>
      <p2 x="760" y="280"/>
    </wire>
    <wire>
      <p1 x="560" y="360"/>
      <p2 x="1060" y="360"/>
    </wire>
    <wire>
      <p1 x="560" y="300"/>
      <p2 x="680" y="300"/>
    </wire>
    <wire>
      <p1 x="960" y="300"/>
      <p2 x="1080" y="300"/>
    </wire>
    <wire>
      <p1 x="1160" y="300"/>
      <p2 x="1300" y="300"/>
    </wire>
    <wire>
      <p1 x="1080" y="300"/>
      <p2 x="1160" y="300"/>
    </wire>
    <wire>
      <p1 x="560" y="220"/>
      <p2 x="760" y="220"/>
    </wire>
    <wire>
      <p1 x="100" y="220"/>
      <p2 x="120" y="220"/>
    </wire>
    <wire>
      <p1 x="140" y="220"/>
      <p2 x="320" y="220"/>
    </wire>
    <wire>
      <p1 x="560" y="380"/>
      <p2 x="1140" y="380"/>
    </wire>
    <wire>
      <p1 x="160" y="240"/>
      <p2 x="160" y="340"/>
    </wire>
    <wire>
      <p1 x="1280" y="260"/>
      <p2 x="1280" y="400"/>
    </wire>
    <wire>
      <p1 x="960" y="260"/>
      <p2 x="960" y="300"/>
    </wire>
    <wire>
      <p1 x="1060" y="260"/>
      <p2 x="1060" y="360"/>
    </wire>
    <wire>
      <p1 x="1140" y="260"/>
      <p2 x="1140" y="380"/>
    </wire>
    <wire>
      <p1 x="1300" y="260"/>
      <p2 x="1300" y="300"/>
    </wire>
    <wire>
      <p1 x="1300" y="300"/>
      <p2 x="1300" y="440"/>
    </wire>
    <wire>
      <p1 x="120" y="200"/>
      <p2 x="120" y="220"/>
    </wire>
    <wire>
      <p1 x="1160" y="260"/>
      <p2 x="1160" y="300"/>
    </wire>
    <wire>
      <p1 x="1080" y="260"/>
      <p2 x="1080" y="300"/>
    </wire>
    <wire>
      <p1 x="140" y="220"/>
      <p2 x="140" y="260"/>
    </wire>
    <wire>
      <p1 x="940" y="260"/>
      <p2 x="940" y="340"/>
    </wire>
  </wires>
  <measurementOrdering/>
</circuit>